%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.6.0
-module(message).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("message.hrl").
-include("../../gpb/include/gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'RawMessage'() :: #'RawMessage'{}.

-type 'Message'() :: #'Message'{}.

-type 'SumValue'() :: #'SumValue'{}.

-export_type(['RawMessage'/0, 'Message'/0, 'SumValue'/0]).

-spec encode_msg(#'RawMessage'{} | #'Message'{} | #'SumValue'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'RawMessage'{} | #'Message'{} | #'SumValue'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'RawMessage'{} | #'Message'{} | #'SumValue'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RawMessage' ->
	  encode_msg_RawMessage(id(Msg, TrUserData), TrUserData);
      'Message' ->
	  encode_msg_Message(id(Msg, TrUserData), TrUserData);
      'SumValue' ->
	  encode_msg_SumValue(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_RawMessage(Msg, TrUserData) ->
    encode_msg_RawMessage(Msg, <<>>, TrUserData).


encode_msg_RawMessage(#'RawMessage'{channel = F1,
				    publisher = F2, protocol = F3,
				    contentType = F4, payload = F5},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case iolist_size(TrF5) of
	       0 -> B4;
	       _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_Message(Msg, TrUserData) ->
    encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#'Message'{channel = F1,
			      publisher = F2, protocol = F3, name = F4,
			      unit = F5, value = F6, valueSum = F7, time = F8,
			      updateTime = F9, link = F10},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 =:= undefined -> B5;
	    true ->
		case id(F6, TrUserData) of
		  {floatValue, TF6} ->
		      begin
			TrTF6 = id(TF6, TrUserData),
			e_type_double(TrTF6, <<B5/binary, 49>>, TrUserData)
		      end;
		  {stringValue, TF6} ->
		      begin
			TrTF6 = id(TF6, TrUserData),
			e_type_string(TrTF6, <<B5/binary, 58>>, TrUserData)
		      end;
		  {boolValue, TF6} ->
		      begin
			TrTF6 = id(TF6, TrUserData),
			e_type_bool(TrTF6, <<B5/binary, 64>>, TrUserData)
		      end;
		  {dataValue, TF6} ->
		      begin
			TrTF6 = id(TF6, TrUserData),
			e_type_string(TrTF6, <<B5/binary, 74>>, TrUserData)
		      end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 e_mfield_Message_valueSum(TrF7, <<B6/binary, 82>>,
						   TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0.0 -> B7;
		     true ->
			 e_type_double(TrF8, <<B7/binary, 89>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_double(TrF9, <<B8/binary, 97>>, TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     case is_empty_string(TrF10) of
	       true -> B9;
	       false ->
		   e_type_string(TrF10, <<B9/binary, 106>>, TrUserData)
	     end
	   end
    end.

encode_msg_SumValue(Msg, TrUserData) ->
    encode_msg_SumValue(Msg, <<>>, TrUserData).


encode_msg_SumValue(#'SumValue'{value = F1}, Bin,
		    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0.0 -> Bin;
		true ->
		    e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	     end
	   end
    end.

e_mfield_Message_valueSum(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SumValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('RawMessage', Bin, TrUserData) ->
    id(decode_msg_RawMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Message', Bin, TrUserData) ->
    id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SumValue', Bin, TrUserData) ->
    id(decode_msg_SumValue(Bin, TrUserData), TrUserData).



decode_msg_RawMessage(Bin, TrUserData) ->
    dfp_read_field_def_RawMessage(Bin, 0, 0,
				  id([], TrUserData), id([], TrUserData),
				  id([], TrUserData), id([], TrUserData),
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_RawMessage(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_channel(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_publisher(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_protocol(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_contentType(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_payload(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #'RawMessage'{channel = F@_1, publisher = F@_2,
		  protocol = F@_3, contentType = F@_4, payload = F@_5};
dfp_read_field_def_RawMessage(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_RawMessage(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_RawMessage(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RawMessage(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_RawMessage(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RawMessage_channel(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      18 ->
	  d_field_RawMessage_publisher(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_RawMessage_protocol(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_RawMessage_contentType(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_RawMessage_payload(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RawMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_RawMessage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_RawMessage(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_RawMessage(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_RawMessage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_RawMessage(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #'RawMessage'{channel = F@_1, publisher = F@_2,
		  protocol = F@_3, contentType = F@_4, payload = F@_5}.

d_field_RawMessage_channel(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_channel(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_channel(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_RawMessage_publisher(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_publisher(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_publisher(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_RawMessage_protocol(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_protocol(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_protocol(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, TrUserData).

d_field_RawMessage_contentType(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_contentType(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_RawMessage_contentType(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_RawMessage_payload(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_payload(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_payload(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, TrUserData).

skip_varint_RawMessage(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_RawMessage(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_RawMessage(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_RawMessage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_RawMessage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_RawMessage(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_RawMessage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RawMessage(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_RawMessage(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RawMessage(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_RawMessage(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_RawMessage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_RawMessage(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_RawMessage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0,
			       id([], TrUserData), id([], TrUserData),
			       id([], TrUserData), id([], TrUserData),
			       id([], TrUserData), id(undefined, TrUserData),
			       id(undefined, TrUserData), id(0.0, TrUserData),
			       id(0.0, TrUserData), id([], TrUserData),
			       TrUserData).

dfp_read_field_def_Message(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_publisher(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_protocol(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_unit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Message(<<49, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_floatValue(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData);
dfp_read_field_def_Message(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_stringValue(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
dfp_read_field_def_Message(<<64, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_boolValue(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_Message(<<74, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_dataValue(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_Message(<<82, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_valueSum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_Message(<<89, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Message(<<97, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_updateTime(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData);
dfp_read_field_def_Message(<<106, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_Message_link(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #'Message'{channel = F@_1, publisher = F@_2,
	       protocol = F@_3, name = F@_4, unit = F@_5, value = F@_6,
	       valueSum = F@_7, time = F@_8, updateTime = F@_9,
	       link = F@_10};
dfp_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Message_channel(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      18 ->
	  d_field_Message_publisher(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      26 ->
	  d_field_Message_protocol(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      34 ->
	  d_field_Message_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      42 ->
	  d_field_Message_unit(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      49 ->
	  d_field_Message_floatValue(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
      58 ->
	  d_field_Message_stringValue(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, TrUserData);
      64 ->
	  d_field_Message_boolValue(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      74 ->
	  d_field_Message_dataValue(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      82 ->
	  d_field_Message_valueSum(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      89 ->
	  d_field_Message_time(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      97 ->
	  d_field_Message_updateTime(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
      106 ->
	  d_field_Message_link(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #'Message'{channel = F@_1, publisher = F@_2,
	       protocol = F@_3, name = F@_4, unit = F@_5, value = F@_6,
	       valueSum = F@_7, time = F@_8, updateTime = F@_9,
	       link = F@_10}.

d_field_Message_channel(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_channel(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_Message_channel(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

d_field_Message_publisher(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_publisher(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_Message_publisher(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

d_field_Message_protocol(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_protocol(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_Message_protocol(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_Message_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_Message_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_Message_unit(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_unit(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_Message_unit(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_Message_floatValue(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({floatValue, id(infinity, TrUserData)},
				  TrUserData),
			       F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Message_floatValue(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({floatValue, id('-infinity', TrUserData)},
				  TrUserData),
			       F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Message_floatValue(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({floatValue, id(nan, TrUserData)},
				  TrUserData),
			       F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_Message_floatValue(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({floatValue, id(Value, TrUserData)},
				  TrUserData),
			       F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_Message_stringValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_stringValue(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData);
d_field_Message_stringValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({stringValue, NewFValue}, TrUserData), F@_7,
			       F@_8, F@_9, F@_10, TrUserData).

d_field_Message_boolValue(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_boolValue(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_Message_boolValue(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({boolValue, NewFValue}, TrUserData), F@_7,
			       F@_8, F@_9, F@_10, TrUserData).

d_field_Message_dataValue(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_dataValue(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_Message_dataValue(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       id({dataValue, NewFValue}, TrUserData), F@_7,
			       F@_8, F@_9, F@_10, TrUserData).

d_field_Message_valueSum(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_valueSum(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_Message_valueSum(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8,
			 F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SumValue(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_SumValue(Prev, NewFValue,
							 TrUserData)
			       end,
			       F@_8, F@_9, F@_10, TrUserData).

d_field_Message_time(<<0:48, 240, 127, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
		     F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       id(infinity, TrUserData), F@_9, F@_10,
			       TrUserData);
d_field_Message_time(<<0:48, 240, 255, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
		     F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       id('-infinity', TrUserData), F@_9, F@_10,
			       TrUserData);
d_field_Message_time(<<_:48, 15:4, _:4, _:1, 127:7,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
		     F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       id(nan, TrUserData), F@_9, F@_10, TrUserData);
d_field_Message_time(<<Value:64/little-float,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
		     F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       id(Value, TrUserData), F@_9, F@_10, TrUserData).

d_field_Message_updateTime(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, _, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       id(infinity, TrUserData), F@_10, TrUserData);
d_field_Message_updateTime(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, _, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       id('-infinity', TrUserData), F@_10, TrUserData);
d_field_Message_updateTime(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, _, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       id(nan, TrUserData), F@_10, TrUserData);
d_field_Message_updateTime(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, _, F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       id(Value, TrUserData), F@_10, TrUserData).

d_field_Message_link(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_Message_link(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_Message_link(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       NewFValue, TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_group_Message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

decode_msg_SumValue(Bin, TrUserData) ->
    dfp_read_field_def_SumValue(Bin, 0, 0,
				id(0.0, TrUserData), TrUserData).

dfp_read_field_def_SumValue(<<9, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_SumValue_value(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SumValue(<<>>, 0, 0, F@_1, _) ->
    #'SumValue'{value = F@_1};
dfp_read_field_def_SumValue(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_SumValue(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_SumValue(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SumValue(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_SumValue(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_SumValue_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_SumValue(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_SumValue(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SumValue(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_SumValue(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_SumValue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SumValue(<<>>, 0, 0, F@_1, _) ->
    #'SumValue'{value = F@_1}.

d_field_SumValue_value(<<0:48, 240, 127, Rest/binary>>,
		       Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2,
				id(infinity, TrUserData), TrUserData);
d_field_SumValue_value(<<0:48, 240, 255, Rest/binary>>,
		       Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2,
				id('-infinity', TrUserData), TrUserData);
d_field_SumValue_value(<<_:48, 15:4, _:4, _:1, 127:7,
			 Rest/binary>>,
		       Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2,
				id(nan, TrUserData), TrUserData);
d_field_SumValue_value(<<Value:64/little-float,
			 Rest/binary>>,
		       Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2,
				id(Value, TrUserData), TrUserData).

skip_varint_SumValue(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_SumValue(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SumValue(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_SumValue(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SumValue(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SumValue(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SumValue(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_SumValue(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SumValue(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_SumValue(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_SumValue(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_SumValue(Rest, Z1, Z2, F@_1,
				TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RawMessage' ->
	  merge_msg_RawMessage(Prev, New, TrUserData);
      'Message' -> merge_msg_Message(Prev, New, TrUserData);
      'SumValue' -> merge_msg_SumValue(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_RawMessage/3}).
merge_msg_RawMessage(#'RawMessage'{channel = PFchannel,
				   publisher = PFpublisher,
				   protocol = PFprotocol,
				   contentType = PFcontentType,
				   payload = PFpayload},
		     #'RawMessage'{channel = NFchannel,
				   publisher = NFpublisher,
				   protocol = NFprotocol,
				   contentType = NFcontentType,
				   payload = NFpayload},
		     _) ->
    #'RawMessage'{channel =
		      if NFchannel =:= undefined -> PFchannel;
			 true -> NFchannel
		      end,
		  publisher =
		      if NFpublisher =:= undefined -> PFpublisher;
			 true -> NFpublisher
		      end,
		  protocol =
		      if NFprotocol =:= undefined -> PFprotocol;
			 true -> NFprotocol
		      end,
		  contentType =
		      if NFcontentType =:= undefined -> PFcontentType;
			 true -> NFcontentType
		      end,
		  payload =
		      if NFpayload =:= undefined -> PFpayload;
			 true -> NFpayload
		      end}.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(#'Message'{channel = PFchannel,
			     publisher = PFpublisher, protocol = PFprotocol,
			     name = PFname, unit = PFunit, value = PFvalue,
			     valueSum = PFvalueSum, time = PFtime,
			     updateTime = PFupdateTime, link = PFlink},
		  #'Message'{channel = NFchannel, publisher = NFpublisher,
			     protocol = NFprotocol, name = NFname,
			     unit = NFunit, value = NFvalue,
			     valueSum = NFvalueSum, time = NFtime,
			     updateTime = NFupdateTime, link = NFlink},
		  TrUserData) ->
    #'Message'{channel =
		   if NFchannel =:= undefined -> PFchannel;
		      true -> NFchannel
		   end,
	       publisher =
		   if NFpublisher =:= undefined -> PFpublisher;
		      true -> NFpublisher
		   end,
	       protocol =
		   if NFprotocol =:= undefined -> PFprotocol;
		      true -> NFprotocol
		   end,
	       name =
		   if NFname =:= undefined -> PFname;
		      true -> NFname
		   end,
	       unit =
		   if NFunit =:= undefined -> PFunit;
		      true -> NFunit
		   end,
	       value =
		   if NFvalue =:= undefined -> PFvalue;
		      true -> NFvalue
		   end,
	       valueSum =
		   if PFvalueSum /= undefined, NFvalueSum /= undefined ->
			  merge_msg_SumValue(PFvalueSum, NFvalueSum,
					     TrUserData);
		      PFvalueSum == undefined -> NFvalueSum;
		      NFvalueSum == undefined -> PFvalueSum
		   end,
	       time =
		   if NFtime =:= undefined -> PFtime;
		      true -> NFtime
		   end,
	       updateTime =
		   if NFupdateTime =:= undefined -> PFupdateTime;
		      true -> NFupdateTime
		   end,
	       link =
		   if NFlink =:= undefined -> PFlink;
		      true -> NFlink
		   end}.

-compile({nowarn_unused_function,merge_msg_SumValue/3}).
merge_msg_SumValue(#'SumValue'{value = PFvalue},
		   #'SumValue'{value = NFvalue}, _) ->
    #'SumValue'{value =
		    if NFvalue =:= undefined -> PFvalue;
		       true -> NFvalue
		    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RawMessage' ->
	  v_msg_RawMessage(Msg, [MsgName], TrUserData);
      'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
      'SumValue' ->
	  v_msg_SumValue(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_RawMessage/3}).
-dialyzer({nowarn_function,v_msg_RawMessage/3}).
v_msg_RawMessage(#'RawMessage'{channel = F1,
			       publisher = F2, protocol = F3, contentType = F4,
			       payload = F5},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [channel | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [publisher | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [protocol | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [contentType | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [payload | Path], TrUserData)
    end,
    ok;
v_msg_RawMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RawMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#'Message'{channel = F1, publisher = F2,
			 protocol = F3, name = F4, unit = F5, value = F6,
			 valueSum = F7, time = F8, updateTime = F9, link = F10},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [channel | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [publisher | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [protocol | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [name | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [unit | Path], TrUserData)
    end,
    case F6 of
      undefined -> ok;
      {floatValue, OF6} ->
	  v_type_double(OF6, [floatValue, value | Path],
			TrUserData);
      {stringValue, OF6} ->
	  v_type_string(OF6, [stringValue, value | Path],
			TrUserData);
      {boolValue, OF6} ->
	  v_type_bool(OF6, [boolValue, value | Path], TrUserData);
      {dataValue, OF6} ->
	  v_type_string(OF6, [dataValue, value | Path],
			TrUserData);
      _ -> mk_type_error(invalid_oneof, F6, [value | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_SumValue(F7, [valueSum | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_double(F8, [time | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_double(F9, [updateTime | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [link | Path], TrUserData)
    end,
    ok;
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_msg_SumValue/3}).
-dialyzer({nowarn_function,v_msg_SumValue/3}).
v_msg_SumValue(#'SumValue'{value = F1}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_SumValue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SumValue'}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'RawMessage'},
      [#field{name = channel, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = publisher, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = protocol, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = contentType, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = payload, fnum = 5, rnum = 6, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'Message'},
      [#field{name = channel, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = publisher, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = protocol, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = name, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = unit, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #gpb_oneof{name = value, rnum = 7,
		  fields =
		      [#field{name = floatValue, fnum = 6, rnum = 7,
			      type = double, occurrence = optional, opts = []},
		       #field{name = stringValue, fnum = 7, rnum = 7,
			      type = string, occurrence = optional, opts = []},
		       #field{name = boolValue, fnum = 8, rnum = 7,
			      type = bool, occurrence = optional, opts = []},
		       #field{name = dataValue, fnum = 9, rnum = 7,
			      type = string, occurrence = optional,
			      opts = []}]},
       #field{name = valueSum, fnum = 10, rnum = 8,
	      type = {msg, 'SumValue'}, occurrence = optional,
	      opts = []},
       #field{name = time, fnum = 11, rnum = 9, type = double,
	      occurrence = optional, opts = []},
       #field{name = updateTime, fnum = 12, rnum = 10,
	      type = double, occurrence = optional, opts = []},
       #field{name = link, fnum = 13, rnum = 11, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'SumValue'},
      [#field{name = value, fnum = 1, rnum = 2, type = double,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['RawMessage', 'Message', 'SumValue'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['RawMessage', 'Message', 'SumValue'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('RawMessage') ->
    [#field{name = channel, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = publisher, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = protocol, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = contentType, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = payload, fnum = 5, rnum = 6, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('Message') ->
    [#field{name = channel, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = publisher, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = protocol, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = name, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = unit, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #gpb_oneof{name = value, rnum = 7,
		fields =
		    [#field{name = floatValue, fnum = 6, rnum = 7,
			    type = double, occurrence = optional, opts = []},
		     #field{name = stringValue, fnum = 7, rnum = 7,
			    type = string, occurrence = optional, opts = []},
		     #field{name = boolValue, fnum = 8, rnum = 7,
			    type = bool, occurrence = optional, opts = []},
		     #field{name = dataValue, fnum = 9, rnum = 7,
			    type = string, occurrence = optional, opts = []}]},
     #field{name = valueSum, fnum = 10, rnum = 8,
	    type = {msg, 'SumValue'}, occurrence = optional,
	    opts = []},
     #field{name = time, fnum = 11, rnum = 9, type = double,
	    occurrence = optional, opts = []},
     #field{name = updateTime, fnum = 12, rnum = 10,
	    type = double, occurrence = optional, opts = []},
     #field{name = link, fnum = 13, rnum = 11, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('SumValue') ->
    [#field{name = value, fnum = 1, rnum = 2, type = double,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> mainflux.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "message.proto".



gpb_version_as_string() ->
    "4.6.0".

gpb_version_as_list() ->
    [4,6,0].
